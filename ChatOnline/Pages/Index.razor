@page "/"
@inject NavigationManager NavManager

<PageTitle>chat.online</PageTitle>

<div class="container mt-5">
    <!-- Форма для авторизации -->
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Authorization</h5>
            <div>
                <div class="form-group">
                    <label for="exampleInputEmail1">Email address</label>
                    <input @bind="email" type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Username">
                    <small id="emailHelp" class="form-text text-muted">Username must be 0-9, A-z.</small>
                </div>
                <div class="form-group">
                    <label for="exampleInputPassword1">Password</label>
                    <input @bind="password" type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
                </div>
            </div>
            <div class="d-flex flex-column">
                <button @onclick="Authorize" class="btn btn-primary">Authorize</button>
            </div>
        </div>
    </div>

    <!-- Форма для регистрации -->
    <div class="card mt-3">
        <div class="card-body">
            <h5 class="card-title">Registration</h5>
            <div>
                <div class="form-group">
                    <label for="regUsername">Username</label>
                    <input @bind="_regUser.Username" type="text" class="form-control" id="regUsername" placeholder="Username">
                </div>
                <div class="form-group">
                    <label for="regPassword">Password</label>
                    <input @bind="_regUser.Password" type="password" class="form-control" id="regPassword" placeholder="Password">
                </div>
            </div>
            <div class="d-flex flex-column">
                <button @onclick="Register" class="btn btn-primary">Register</button>
                @if (!string.IsNullOrEmpty(message))
                {
                    <div class="alert alert-@messageType" role="alert">
                        @message
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<User> userList = new List<User>
    {
        new User("marsm4@mail.ru", "Marsel-05!"),
        new User("mars@mail.ru", "password2!~"),
        // Здесь добавьте других пользователей
    };

    private User _authUser = new User("", "");
    private User _regUser = new User("", "");

    private string email;
    private string password;
    private string message = "";
    private string messageType = "";

    private void Authorize()
    {
        if (!string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(password))
        {
            // Проверка существующего пользователя с введенными данными
            bool isUserValid = CheckUserValidity(email, password);

            if (isUserValid)
            {
                // Если пользователь существует и введенные данные верны,
                // или пользователь успешно зарегистрировался,
                // переходим на страницу чата
                NavManager.NavigateTo("/chat");
            }
            else
            {
                // Вывод сообщения об ошибке о неверных учетных данных
                message = "Неверный email или пароль.";
                messageType = "danger";
            }
        }
        else
        {
            // Вывод сообщения об ошибке о не заполненных полях
            message = "Пожалуйста, заполните все поля.";
            messageType = "warning";
        }
    }

    private bool CheckUserValidity(string email, string password)
    {
        // Проверяем, есть ли пользователь с введенными данными в списке
        foreach (var user in userList)
        {
            if (user.Username == email && user.Password == password)
            {
                _authUser = user; // Сохраняем информацию об авторизованном пользователе
                return true; // Пользователь найден
            }
        }

        return false; // Пользователь не найден
    }

    private void Register()
    {
        if (_regUser.Username.Length < 6 || !char.IsLetter(_regUser.Username[0]))
        {
            // Проверка длины логина и первого символа
            message = "Логин должен быть минимум из 6 символов и не должен начинаться с цифры.";
            messageType = "danger";
            return;
        }

        if (_regUser.Password.Length < 6 || !HasUpperCase(_regUser.Password) || !HasDigit(_regUser.Password) || !HasSpecialCharacter(_regUser.Password))
        {
            // Проверка длины пароля, наличия заглавной буквы, цифры и спец. символа
            message = "Пароль должен быть минимум из 6 символов и содержать хотя бы 1 букву верхнего регистра, хотя бы 1 цифру и хотя бы 1 спец. символ.";
            messageType = "danger";
            return;
        }

        // Добавляем зарегистрированного пользователя в список пользователей
        userList.Add(_regUser);
        // Выводим сообщение об успешной регистрации
        message = "Регистрация успешна!";
        messageType = "success";
    }

    class User
    {
        public User(string username, string password)
        {
            Id = Guid.NewGuid().ToString();
            Username = username;
            Password = password;
        }

        public string Id { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }
    private bool HasUpperCase(string str)
    {
        foreach (char c in str)
        {
            if (char.IsUpper(c))
            {
                return true;
            }
        }
        return false;
    }

    private bool HasDigit(string str)
    {
        foreach (char c in str)
        {
            if (char.IsDigit(c))
            {
                return true;
            }
        }
        return false;
    }

    private bool HasSpecialCharacter(string str)
    {
        foreach (char c in str)
        {
            if (!char.IsLetterOrDigit(c) && !char.IsWhiteSpace(c))
            {
                return true;
            }
        }
        return false;
    }

}
